
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
  games Game[]
  // notes Note[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("games")
}

model topic_count {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  topic String @unique
  count Int
}

model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  answer            String
  gameId            String @db.ObjectId
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?

  game Game @relation(fields: [gameId], references: [id])

  @@map("questions")
}

// course contains many units
model Course {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  units Unit[]

  @@map("courses")
}

// unit contains many chapters
model Unit {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@map("units")
}

model Chapter {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  unitId String @db.ObjectId

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    // @db.Varchar(3000)
  unit               Unit       @relation(fields: [unitId], references: [id])
  quests          Quest[]

  @@map("chapters")
}

model Quest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String @db.ObjectId

  question String // @db.Varchar(3000)
  answer   String // @db.Varchar(3000)
  options  String // @db.Varchar(3000)
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@map("quests")
}

model Note {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String?
  userId   String // @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}